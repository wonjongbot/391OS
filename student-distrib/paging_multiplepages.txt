// for reference

#include "paging.h"


/* 
 *   init_paging
 *   DESCRIPTION: used to init and open paging
 *   INPUTS: none
 *   OUTPUTS: none 
 *   RETURN VALUE: none
 *   SIDE EFFECTS: will change page_directory and page_table0 array, will change the control registers, and will enable paging
 */
void init_paging(){
    uint32_t i;
    uint32_t kernal_index,vga_table_index,vga_dic_index,modex_table_index;
    
    //initialize the page directory
    //page_directory[0] (4kb)
    for(i=0;i<PAGE_DIC_MAX;i++){
        page_directory[i].val = 0;  // clean all
        //page_directory[i].present=1;
        page_directory[i].rw = 1;   // set rw flag
    }

    //initialize the page table
    for(i=0;i<PAGE_TAB_MAX;i++){
        page_table0[i].val = 0;     // clean all
        page_table0[i].present=(i == 0) ? 1 : 0;
        page_table0[i].rw = 1;      // set rw flag
        page_table0[i].base_addr = i;   // set the base address as the entry index aligned
    }
    
    page_directory[0].present = 1;
    page_directory[0].base_addr=((uint32_t)page_table0 & ALIGNED_ADDR_MASK)>>TABLE_ADDRESS_SHIFT;
    
    // Set the kernal page (4MB)
    kernal_index=dir_entry(KERNAL_ADDR);
    page_directory[kernal_index].present=1;
    page_directory[kernal_index].rw=1;
    page_directory[kernal_index].ps=1;
    page_directory[kernal_index].global=1;
    page_directory[kernal_index].base_addr=KERNAL_ADDR>>TABLE_ADDRESS_SHIFT ;
    
    // Set the VGA page, first set the page directory entry
    // Then, set the page_table0.  80 rows 25 columns 2 chars each character, 160 is left for more space 
    for (i = VGA_TEXT_BUF_ADDR0; i<= VGA_TEXT_BUF_ADDR3; i+=0x1000){
        //get index
        vga_table_index=page_entry(i);
        vga_dic_index=dir_entry(i);

        page_directory[vga_dic_index].present=1;
        page_directory[vga_dic_index].rw=1;
        page_directory[vga_dic_index].global=1;
        page_directory[vga_dic_index].base_addr=((uint32_t)page_table0 & ALIGNED_ADDR_MASK)>>TABLE_ADDRESS_SHIFT;
        
        page_table0[vga_table_index].present=1;
        page_table0[vga_table_index].rw=1;
        page_table0[vga_table_index].base_addr=(i & ALIGNED_ADDR_MASK)>>TABLE_ADDRESS_SHIFT;
    }
    // Set Modex Pagingls
    for(i=VGA_MODEX_ADDR; i<0xB0000; i+=0x1000){
        modex_table_index=page_entry(i);
        page_table0[modex_table_index].present=1;
        page_table0[modex_table_index].rw=1;
        page_table0[modex_table_index].base_addr=(i & ALIGNED_ADDR_MASK)>>TABLE_ADDRESS_SHIFT;
    }
    // Init paging by seting the control registers
    asm volatile(
        "movl $page_directory, %%eax \n\t"          // move page_directory's address to cr3(PBDR)
        "movl %%eax, %%cr3 \n\t"
        "movl %%cr4, %%eax \n\t"
        "orl  $0x10, %%eax \n\t"                    // set 5th in cr4 to 1 to enable mixed size pages
        "movl %%eax, %%cr4 \n\t"
        "movl %%cr0, %%eax \n\t"
        "orl  $0x80000001, %%eax \n\t"              // set the 1th in cr0 and highest bit in cr0 to enable paging 
        "movl %%eax, %%cr0 \n\t"
        :   :   : "%eax","cc"    // %eax,cc changed
        );
}